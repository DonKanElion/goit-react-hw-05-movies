{"version":3,"file":"static/js/104.f93585ac.chunk.js","mappings":"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","sources":["components/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","services/moviesAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { Link, useLocation } from 'react-router-dom';\n\nconst Item = styled.li`\n  font-size: 12px;\n  font-weight: 400;\n`;\n\nconst MoviesListItem = movie => {\n  const { id, original_title } = movie.props;\n\n  const location = useLocation();\n\n  return (\n    <Item>\n      <Link to={`/movies/:${id}`} state={{ from: location }}>\n        {original_title}\n      </Link>\n    </Item>\n  );\n};\n\nMoviesListItem.propTypes = {\n  movie: PropTypes.object,\n};\n\nexport default MoviesListItem;\n","import PropTypes from 'prop-types';\nimport MoviesListItem from 'components/MoviesListItem/MoviesListItem';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <ul>\n      {movies.map( movie => {\n        const { id } = movie;\n        return (\n          <MoviesListItem key={id} props={movie} >\n          </MoviesListItem>\n        );\n      })}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\n\n/*Resize the wrap to see the search bar change!*/\nexport const Wrap = styled.div`\n  width: 50%;\n  padding: 10px 0;\n`;\n\nexport const Form = styled.form`\n  width: 100%;\n  position: relative;\n  display: flex;\n`;\n\nexport const SearchTerm = styled.input`\n  width: 100%;\n  border: 3px solid var(--bs-primary);\n  border-right: none;\n  padding: 8px;\n  height: 28px;\n  border-radius: 5px 0 0 5px;\n  outline: none;\n  color: black;\n  font-size: 14px;\n  font-weight: 400;\n  &focus {\n    color: #00b4cc;\n  }\n`;\n\nexport const SearchBtn = styled.button`\n  width: 60px;\n  height: 28px;\n  border: 1px solid var(--bs-primary);\n  background: var(--bs-primary);\n  text-align: center;\n  color: white;\n  border-radius: 0 5px 5px 0;\n  cursor: pointer;\n  font-size: 14px;\n\n  &:hover,\n    &:focus {\n        color: black;\n        /* background-color: rgba(123, 211, 255, 0.86); */\n    }\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { Wrap, Form, SearchTerm, SearchBtn } from './SearchForm.styled';\nimport { getMovieSearch } from 'services/moviesAPI';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader';\n\n// const SearchForm = ({ onSubmit }) => {  ===== >> БУЛО\n\nconst SearchForm = () => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState('');\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const updateQueryString = searchQuery => {\n    const nextParams = searchQuery !== '' ? { searchQuery } : {};\n    setSearchParams(nextParams);\n  };\n\n  const handleChange = evt => {\n    const { value } = evt.target;\n    setQuery(value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n\n    if (!query.trim()) {\n      return Notify.warning('Enter correct title.');\n    }\n    setMovie(query);\n    updateQueryString(query);\n    form.reset();\n    return setQuery('');\n  };\n\n  useEffect(() => {\n    if (searchParams.get('searchQuery')) {\n      return setMovie(searchParams.get('searchQuery'));\n    }\n  }, [searchParams]);\n\n  useEffect(() => {\n    if (!movie) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    getMovieSearch(movie)\n      .then(resp => {\n        const { results } = resp;\n        if (results < 1) {\n          return Notify.warning('Enter correct title.');\n        }\n        setSearchMovies([...results]);\n      })\n      .catch(error => {\n        console.log('ERROR: ', error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movie]);\n\n  return (\n    <>\n      <Wrap>\n        <Form onSubmit={handleSubmit}>\n          <SearchTerm\n            type=\"text\"\n            name=\"inputQuery\"\n            onChange={handleChange}\n            autocomplete=\"off\"\n            // autofocus\n            placeholder=\"Search movies\"\n          ></SearchTerm>\n\n          {/* <SearchBtn type=\"submit\" onClick={handleSubmit}> */}\n          <SearchBtn type=\"submit\">\n            <p>Search</p>\n          </SearchBtn>\n        </Form>\n      </Wrap>\n\n      {isLoading ? <Loader /> : <MoviesList movies={searchMovies} />}\n    </>\n  );\n};\n\nexport default SearchForm;\n","import axios from 'axios';\n\nconst API_KEY = 'a0869b2b27b58a659702b4629a364211';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\naxios.defaults.baseURL = BASE_URL;\n\nexport async function getMovies() {\n  const { data } = await axios.get(`/trending/movie/week?api_key=${API_KEY}`);\n  return data;\n}\n\nexport async function getMovieSearch(query){\n  const rest = await axios.get(`search/movie?api_key=${API_KEY}&query=${query}`)\n  return rest.data;\n}\n\nexport async function getMoviesById(movieId) {\n  const resp = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  return resp.data;\n}\n\nexport async function getMoviesReviews(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return data.results;\n}\n\nexport async function getMoviesCast(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return data.cast;\n}\n"],"names":["Item","styled","movie","props","id","original_title","location","useLocation","to","state","from","movies","map","Wrap","Form","SearchTerm","SearchBtn","useState","query","setQuery","setMovie","searchMovies","setSearchMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","useEffect","get","getMovieSearch","then","resp","results","Notify","catch","error","console","log","finally","onSubmit","evt","preventDefault","searchQuery","form","currentTarget","trim","reset","type","name","onChange","value","target","autocomplete","placeholder","Loader","MoviesList","API_KEY","getMovies","axios","data","rest","getMoviesById","movieId","getMoviesReviews","getMoviesCast","cast"],"sourceRoot":""}