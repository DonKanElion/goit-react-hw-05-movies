{"version":3,"file":"static/js/570.8596d719.chunk.js","mappings":"wRAEaA,EAAWC,EAAAA,GAAAA,GAAH,iLASRC,EAAOD,EAAAA,GAAAA,GAAH,6GAQJE,EAAWF,EAAAA,GAAAA,IAAH,kHAQRG,EAAQH,EAAAA,GAAAA,IAAH,sD,mBCOlB,EA5BiB,SAAC,GAAc,IAAZI,EAAW,EAAXA,KAClB,OACE,SAACL,EAAD,UACGK,EAAKC,KAAI,SAAAC,GACR,IAAQC,EAAsCD,EAAtCC,GAAIC,EAAkCF,EAAlCE,aAAcC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,UAE1BC,EAAWH,EAAY,UARhB,8BAQgB,eAA0BA,GAAmBI,EAE1E,OACE,UAACX,EAAD,YACE,SAACC,EAAD,WACA,SAACC,EAAD,CACEU,IAAKF,EACLG,IAAKL,OAGP,wBAAKA,KACL,uCAAeC,OARNH,EAWd,KAGN,ECgBD,EArCa,WACX,OAAwBQ,EAAAA,EAAAA,UAAS,IAAjC,eAAOX,EAAP,KAAaY,EAAb,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAGMX,GAFcY,EAAAA,EAAAA,MAAZC,QAEWC,MAAM,GAkBzB,OAhBAC,EAAAA,EAAAA,YAAU,WACRJ,GAAa,IACbK,EAAAA,EAAAA,IAAchB,GACXiB,MAAK,SAAAC,GACJ,OAAmB,IAAfA,EAAIC,OACCC,EAAAA,OAAAA,QAAe,+CAEjBX,GAAQ,OAAIS,GACpB,IACAG,OAAM,SAAAC,GACLC,QAAQC,IAAI,UAAWF,EACxB,IACAG,SAAQ,WACPd,GAAa,EACd,GACJ,GAAE,CAACX,KAEF,UAAC,KAAD,YACE,kCACEU,EAME,KALc,IAAhBb,EAAKsB,QACH,wEAEA,SAAC,EAAD,CAAUtB,KAAMA,MAKzB,C,yLCzCY6B,EAAcjC,EAAAA,GAAAA,IAAH,0CAIXkC,EAAiBlC,EAAAA,GAAAA,QAAH,uJAOdmC,EAASnC,EAAAA,GAAAA,IAAH,4EAMNoC,EAAUpC,EAAAA,GAAAA,IAAH,4CAIPqC,EAAMrC,EAAAA,GAAAA,IAAH,iN,iMCrBVsC,EAAU,mCAIT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBC,EAAAA,EAAAA,IAAA,uCAA0CF,IAD5D,uBACGG,EADH,EACGA,KADH,kBAEEA,GAFF,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACcH,EAAAA,EAAAA,IAAA,+BAAkCF,EAAlC,kBAAmDK,IADjE,cACCC,EADD,yBAEEA,EAAKH,MAFP,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA6BzB,GAA7B,uFACcoB,EAAAA,EAAAA,IAAA,iBAAoBpB,EAApB,oBAAuCkB,IADrD,cACCQ,EADD,yBAEEA,EAAKL,MAFP,kEAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAgC3B,GAAhC,yFACkBoB,EAAAA,EAAAA,IAAA,iBACXpB,EADW,4BACgBkB,IAFlC,uBACGG,EADH,EACGA,KADH,kBAIEA,EAAKO,SAJP,kEAOA,SAAezB,EAAtB,+CAAO,OAAP,oBAAO,WAA6BH,GAA7B,yFACkBoB,EAAAA,EAAAA,IAAA,iBACXpB,EADW,4BACgBkB,IAFlC,uBACGG,EADH,EACGA,KADH,kBAIEA,EAAKrC,MAJP,kEAxBPoC,EAAAA,EAAAA,SAAAA,QADiB,+B","sources":["components/Cast/CastList.styles.js","components/Cast/CastList.jsx","components/Cast/Cast.jsx","pages/GlobalStyles.styled.js","services/moviesAPI.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ListItem = styled.ul`\nheight: 100%;\ndisplay: grid;\ngrid-template-columns: repeat(4, 1fr);\ngrid-template-rows: repeat(4, 1fr);\ngrid-column-gap: 10px;\ngrid-row-gap: 10px;\n`;\n\nexport const Item = styled.li`\nborder: 1px solid var(--bs-gray);\nborder-radius: 5px;\npadding: 5px;\nmargin: 5px;\n`;\n\n\nexport const PhotoBox = styled.div`\ndisplay: flex;\nalign-items: center;\nwidth: 214px;\nheight: 321px;\nmargin-bottom: 5px;\n`;\n\nexport const Photo = styled.img`\ndisplay: flex;\nwidth: 100%;\n`;","import PropTypes from 'prop-types';\nimport { ListItem, Item, PhotoBox, Photo } from './CastList.styles';\nimport defaultPhoto from '../../default_photo.png';\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/';\n\nconst CastList = ({ cast }) => {\n  return (\n    <ListItem>\n      {cast.map(e => {\n        const { id, profile_path, name, character } = e;\n\n        const checkImg = profile_path ? (`${BASE_IMG_URL}w300${profile_path}`) : (defaultPhoto);\n\n        return (\n          <Item key={id}>\n            <PhotoBox>\n            <Photo\n              src={checkImg}\n              alt={name}\n            />\n            </PhotoBox>\n            <h4>{name}</h4>\n            <p>Character: {character}</p>\n          </Item>\n        );\n      })}\n    </ListItem>\n  );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.array.isRequired,\n};\nexport default CastList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { SectionDetails } from 'pages/GlobalStyles.styled';\nimport { getMoviesCast } from 'services/moviesAPI';\nimport CastList from './CastList';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  const id = movieId.slice(1);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMoviesCast(id)\n      .then(res => {\n        if (res.length === 0) {\n          return Notify.warning('We don’t have any cast for this movie.');\n        }\n        return setCast([...res]);\n      })\n      .catch(error => {\n        console.log('ERROR: ', error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [id]);\n  return (\n    <SectionDetails>\n      <h3> Cast</h3>\n      {!isLoading ? (\n        cast.length === 0 ? (\n          <p>We don’t have any cast for this movie.</p>\n        ) : (\n          <CastList cast={cast}></CastList>\n        )\n      ) : null}\n    </SectionDetails>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const FlexWrapper = styled.div`\n  display: flex;\n`;\n\nexport const SectionDetails = styled.section`\n  padding: 20px 0;\n  margin-bottom: 10px;\n  border-bottom: 1px solid var(--bs-gray);\n  box-shadow: 0 4px 6px -6px #aaaaaa;\n`;\n\nexport const BoxImg = styled.div`\nwidth: 344px;\nheight: 455px;\nmargin-right: 10px;\n`;\n\nexport const Details = styled.div`\npadding-top: 26px;\n`;\n\nexport const Img = styled.img`\n  width: 284px;\n  margin: 12px 20px 16px;\n  padding: 10px 10px 20px 10px;\n  border: 1px solid #bfbfbf;\n  background-color: var(--bs-gray-100);\n  box-shadow: 10px 10px 5px #aaaaaa;\n`;\n","import axios from 'axios';\n\nconst API_KEY = 'a0869b2b27b58a659702b4629a364211';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\naxios.defaults.baseURL = BASE_URL;\n\nexport async function getMovies() {\n  const { data } = await axios.get(`/trending/movie/week?api_key=${API_KEY}`);\n  return data;\n}\n\nexport async function getMovieSearch(query){\n  const rest = await axios.get(`search/movie?api_key=${API_KEY}&query=${query}`)\n  return rest.data;\n}\n\nexport async function getMoviesById(movieId) {\n  const resp = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  return resp.data;\n}\n\nexport async function getMoviesReviews(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return data.results;\n}\n\nexport async function getMoviesCast(movieId) {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return data.cast;\n}\n"],"names":["ListItem","styled","Item","PhotoBox","Photo","cast","map","e","id","profile_path","name","character","checkImg","defaultPhoto","src","alt","useState","setCast","isLoading","setIsLoading","useParams","movieId","slice","useEffect","getMoviesCast","then","res","length","Notify","catch","error","console","log","finally","FlexWrapper","SectionDetails","BoxImg","Details","Img","API_KEY","getMovies","axios","data","getMovieSearch","query","rest","getMoviesById","resp","getMoviesReviews","results"],"sourceRoot":""}